/**
 */
package org.obeonetwork.dsl.scala.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.obeonetwork.dsl.scala.util.ScalaAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScalaItemProviderAdapterFactory extends ScalaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScalaItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Class} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassItemProvider classItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Class}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createClassAdapter()
  {
    if (classItemProvider == null)
    {
      classItemProvider = new ClassItemProvider(this);
    }

    return classItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Object} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ObjectItemProvider objectItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Object}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createObjectAdapter()
  {
    if (objectItemProvider == null)
    {
      objectItemProvider = new ObjectItemProvider(this);
    }

    return objectItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Trait} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TraitItemProvider traitItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Trait}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTraitAdapter()
  {
    if (traitItemProvider == null)
    {
      traitItemProvider = new TraitItemProvider(this);
    }

    return traitItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Field} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FieldItemProvider fieldItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Field}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFieldAdapter()
  {
    if (fieldItemProvider == null)
    {
      fieldItemProvider = new FieldItemProvider(this);
    }

    return fieldItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Constructor} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstructorItemProvider constructorItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Constructor}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConstructorAdapter()
  {
    if (constructorItemProvider == null)
    {
      constructorItemProvider = new ConstructorItemProvider(this);
    }

    return constructorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Method} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodItemProvider methodItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Method}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMethodAdapter()
  {
    if (methodItemProvider == null)
    {
      methodItemProvider = new MethodItemProvider(this);
    }

    return methodItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Signature} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SignatureItemProvider signatureItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Signature}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSignatureAdapter()
  {
    if (signatureItemProvider == null)
    {
      signatureItemProvider = new SignatureItemProvider(this);
    }

    return signatureItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Model} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelItemProvider modelItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Model}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createModelAdapter()
  {
    if (modelItemProvider == null)
    {
      modelItemProvider = new ModelItemProvider(this);
    }

    return modelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Parameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParameterItemProvider parameterItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Parameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createParameterAdapter()
  {
    if (parameterItemProvider == null)
    {
      parameterItemProvider = new ParameterItemProvider(this);
    }

    return parameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Package} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PackageItemProvider packageItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Package}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPackageAdapter()
  {
    if (packageItemProvider == null)
    {
      packageItemProvider = new PackageItemProvider(this);
    }

    return packageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.File} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FileItemProvider fileItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.File}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFileAdapter()
  {
    if (fileItemProvider == null)
    {
      fileItemProvider = new FileItemProvider(this);
    }

    return fileItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Type} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeItemProvider typeItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Type}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypeAdapter()
  {
    if (typeItemProvider == null)
    {
      typeItemProvider = new TypeItemProvider(this);
    }

    return typeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.Visibility} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VisibilityItemProvider visibilityItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.Visibility}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVisibilityAdapter()
  {
    if (visibilityItemProvider == null)
    {
      visibilityItemProvider = new VisibilityItemProvider(this);
    }

    return visibilityItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.obeonetwork.dsl.scala.VisibilityScope} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VisibilityScopeItemProvider visibilityScopeItemProvider;

  /**
   * This creates an adapter for a {@link org.obeonetwork.dsl.scala.VisibilityScope}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVisibilityScopeAdapter()
  {
    if (visibilityScopeItemProvider == null)
    {
      visibilityScopeItemProvider = new VisibilityScopeItemProvider(this);
    }

    return visibilityScopeItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (classItemProvider != null) classItemProvider.dispose();
    if (objectItemProvider != null) objectItemProvider.dispose();
    if (traitItemProvider != null) traitItemProvider.dispose();
    if (fieldItemProvider != null) fieldItemProvider.dispose();
    if (constructorItemProvider != null) constructorItemProvider.dispose();
    if (methodItemProvider != null) methodItemProvider.dispose();
    if (signatureItemProvider != null) signatureItemProvider.dispose();
    if (modelItemProvider != null) modelItemProvider.dispose();
    if (parameterItemProvider != null) parameterItemProvider.dispose();
    if (packageItemProvider != null) packageItemProvider.dispose();
    if (fileItemProvider != null) fileItemProvider.dispose();
    if (typeItemProvider != null) typeItemProvider.dispose();
    if (visibilityItemProvider != null) visibilityItemProvider.dispose();
    if (visibilityScopeItemProvider != null) visibilityScopeItemProvider.dispose();
  }

}
